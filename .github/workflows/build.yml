name: Build

on:
  push:
  workflow_dispatch:

env:
  PACT_BROKER_BASE_URL: https://bethtest-3.pact.dius.com.au
  PACT_BROKER_TOKEN: ${{ secrets.PACTFLOW_TOKEN_FOR_CI_CD_WORKSHOP }}
  REACT_APP_API_BASE_URL: http://localhost:8080
  GIT_SHA: ${{ github.sha }}
  GIT_REF: ${{ github.ref }}
  PACT_URL: https://bethtest-3.pact.dius.com.au/pacts/provider/pactflow-example-provider/consumer/pactflow-example-consumer-webhookless/version/${{ github.sha }}

jobs:
  Test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
      - name: Install
        run: npm i
      - name: Run tests
        run: make test
      - name: Set GIT_BRANCH environment variable
        run: echo "::set-env name=GIT_BRANCH::${GIT_REF:11}"
      - name: Publish pacts
        run: make publish_pacts

  Verify:
    runs-on: ubuntu-latest
    needs: Test
    continue-on-error: true
    steps:
      - run: docker pull pactfoundation/pact-cli:latest
      - uses: actions/checkout@v2
      - name: Check if verification exists
        # Taises an error and does not continue if the verification already exists
        # Because continue-on-error is set to true, this will not fail the overall build however
        run: "! make check_if_successfull_verification_exists"
      - uses: actions/checkout@v2
        with:
          repository: pactflow/example-provider
      - name: Set TRAVIS_BRANCH environment variable
        run: echo "::set-env name=TRAVIS_COMMIT::$(git rev-parse HEAD)"
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
      - name: Install
        run: npm i
      - name: Verify
        run: make ci_webhook
        env:
          PACT_BROKER_PUBLISH_VERIFICATION_RESULTS: true
          TRAVIS_BRANCH: master

  # Could also check out and verify with the production version of the provider here in parallel.
  # To get the prod version of the provider, do
  #   pact-broker describe-version --pacticipant example-provider --latest prod

  # This is still required, as the verification done in the previous step is done by
  # the latest version of the provider, not the production version.
  Can-I-Deploy:
      runs-on: ubuntu-latest
      needs: Verify
      steps:
        - uses: actions/checkout@v2
        - run: docker pull pactfoundation/pact-cli:latest
        - name: Can I deploy?
          run: make can_i_deploy

  # Only deploy from master
  Deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: Can-I-Deploy
    steps:
      - uses: actions/checkout@v2
      - run: docker pull pactfoundation/pact-cli:latest
      - name: set GIT_BRANCH environment variable
        run: echo "::set-env name=GIT_BRANCH::${GIT_REF:11}"
      - name: Deploy
        run: GIT_BRANCH=${GIT_REF:11} make deploy
